{"js":[{"ID":1,"title":"What is the result of the function?<br><pre>(function(){<br>return typeof arguments;<br>})();<\/pre>","variants":["object","array","arguments","undefined","true"],"correct":0,"active":true},{"ID":2,"title":"What is the result of the this code?<br><pre>var f = function g() {<br>return 23;<br>};<br>typeof g();<\/pre>","variants":["number","undefined","function","Error","object"],"correct":3,"active":true},{"ID":3,"title":"What does the alert below?<br><pre>function aaa() {<br>return {<br>test: 1<br>};<br>}<br>alert(typeof aaa());<\/pre>","variants":["function","number","object","undefined","Error"],"correct":3,"active":true},{"ID":4,"title":"What is the result of this code?<br><pre>var bar = 1,foo = {};<br>foo: {<br>bar: 2;<br>baz: ++bar;<br>};<br>foo.baz + foo.bar + bar;<\/pre>","variants":["ReferenceError","undefined","NaN","4","5"],"correct":2,"active":true},{"ID":5,"title":"What is the result of the expression?<br><pre>10 > 9 > 8 === true;<\/pre>","variants":["ReferenceError","TypeError","undefined","true","false"],"correct":4,"active":true},{"ID":6,"title":"What is the result of the function?<br><pre>function foo(a, b) {<br>arguments[1] = 2;<br>alert(b);<br>}<br>foo(1);<\/pre>","variants":["ReferenceError","''","2","undefined","1"],"correct":3,"active":true},{"ID":7,"title":"What is the result of this code?<br><pre> with (function(x, undefined){}) length;<\/pre>","variants":["true","1","2","undefined","Error"],"correct":2,"active":true},{"ID":8,"title":"What is the result of this function?<br><pre>(function(foo){<br>return typeof foo.bar;<br>})({ foo: { bar: 1 } });<\/pre>","variants":["true","undefined","object","number","Error"],"correct":1,"active":true},{"ID":9,"title":"What is the result of this code?<br><pre>var x = [typeof x, typeof y][1];<br>typeof typeof x;<\/pre>","variants":["number","string","undefined","object","Error"],"correct":1,"active":true},{"ID":10,"title":"What is x equels to?<br><pre>  var y = 1, x = y = typeof x;<br>x<\/pre>","variants":["1","number","'undefined'","undefined","'string'"],"correct":4,"active":true},{"ID":11,"title":"What does this function return?<br><pre>(function(x){<br>delete x;<br>return x;<br>})(1);<\/pre>","variants":["1","null","undefined","Error","''"],"correct":0,"active":true},{"ID":12,"title":"Why so Java and JavaScript have similar name?","variants":["Java Script is a stripped-down version of Java","The syntax of JavaScript is loosely based on Java syntax","They both support Object Oriented Programming","They both are server-side languages","None of the above"],"correct":4,"active":true},{"ID":13,"title":"What event handler doesn't exist?","variants":["onAbort","onBlur","onSelection","onFocus","onUnload"],"correct":2,"active":true},{"ID":14,"title":"Which of the following is not a valid JavaScript variable name?","variants":["2java","_java_and_java_names","javaandjava","$bestvar","None of the above"],"correct":0,"active":true},{"ID":15,"title":"What is the result of the code?<br><pre>if (\"a\" in window)) {<br>var a = 1;<br>}<br>alert(a);<\/pre>","variants":["1","null","undefined","Error","number"],"correct":2,"active":true},{"ID":16,"title":"What is the result of the code?<br><pre>function a(x) {<br>return x * 2;<br>}<br>var a;<br>alert(a);<\/pre>","variants":["0","null","undefined","Error","the source code of the function"],"correct":4,"active":true},{"ID":17,"title":"What is the result of the code?<br><pre>function a() {<br>alert(this);<br>}<br>a.call(null);<\/pre>","variants":["RangeError","[object Function]","undefined","[object Window]","Object[window]"],"correct":3,"active":true},{"ID":18,"title":"What is the result of the code?<br><pre>function a() {<br>alert(this);<br>}<br>a.call(null);<\/pre>","variants":["RangeError","[object Function]","undefined","[object Window]","Object[window]"],"correct":3,"active":true},{"ID":18,"title":"What will be the return value of the following code?<br><pre>!!~1<\/pre>","variants":["1","true","undefined","false","NaN"],"correct":1,"active":true},{"ID":19,"title":"What will be the return value of the following code?<br><pre>(true + false) > 2 + true;<\/pre>","variants":["Error","true","undefined","false","NaN"],"correct":3,"active":true},{"ID":20,"title":" Alert helps find errors by...","variants":["displaying current values of variables","indicating execution path","pausing execution","restarting execution","all of the above"],"correct":2,"active":true},{"ID":21,"title":" What will be the output of the following code?<br><pre>var a=4, b=5;<br>alert(a + +(+(+(+b))));<\/pre>","variants":["13","12","9","11","nothing of the above"],"correct":2,"active":true},{"ID":22,"title":" What is the result of the string?<br><pre>+'1' + 1 + '1'<\/pre>","variants":["'21'","'111'","21","11","3"],"correct":0,"active":true},{"ID":23,"title":"Which of the below is used in Java script to insert special characters?","variants":["&","\\","-","%","$"],"correct":1,"active":true},{"ID":24,"title":"Which of the below is used in Java script to insert special characters?","variants":["&","\\","-","%","$"],"correct":1,"active":true},{"ID":25,"title":"Which of the following method is used to evaluate a string of Java Script code in the context of the specified object?","variants":["call","apply","eval","make","run"],"correct":2,"active":true}],"oop":[{"title":"An abstract class is a class which cannot be instantiated as it is mainly used for inheritance","variants":["true","false","","",""],"correct":"1","active":true},{"title":"Scalability in Object Oriented Programming allows for extensions of the objects functions or of class functions.","variants":["true","false","","",""],"correct":"1","active":true},{"title":"A class is considered a template of:","variants":["An object","A variable","A value","An attribute",""],"correct":"1","active":true},{"title":"When a message is sent to an object it is meant that...","variants":["A variable is set for that object","A value is assigned to that object","A method is called on that object","",""],"correct":"3","active":true},{"title":"Constructors must be called before the main function","variants":["True","False","","",""],"correct":"2","active":true},{"title":"The keyword private restricts the access of class of struct members to static functions","variants":["True","False","","",""],"correct":"2","active":true},{"title":"Scalability in Object Oriented Programming  allows for extensions of the objects functions or of a class functions","variants":["True","False","","",""],"correct":"2","active":true},{"title":"We can not inherit the constructor of a base class","variants":["True","False","","",""],"correct":"2","active":true},{"title":"A unit of data in Object Oriented Programming is called","variants":["Byte","Bit","Structure","Block",""],"correct":"4","active":true},{"title":"An object that has more than one form is referred to as","variants":["abstract class"," interface","polymorphism","inheritance",""],"correct":"3","active":true},{"title":"One or more function that has different number of argument or different type of argument but all have same return type is called as","variants":["Function overloading","Prototype","Abstraction","Object","Encapsulation"],"correct":"1","active":true},{"title":"The process by which one object can acquire the properties of another object","variants":["Encapsulation","Polymorphism","Inheritance","",""],"correct":"3","active":true},{"title":"To call a base class constructor in a derived class, is it needed to call the base class initializer.","variants":["True","False","","",""],"correct":"2","active":true},{"title":"When deriving from a private base class, the public, protected and private members of the base class become private members of the derived class.","variants":["True","False","","",""],"correct":"2","active":true},{"title":"Which of the following is not a part of OOP?","variants":["Information hiding","Polymorphism","Multitasking","Type checking",""],"correct":"3","active":true},{"title":"Two or more methods with same name in the same class with different arguments is called as","variants":["Method overloading","Method overriding","","",""],"correct":"1","active":true},{"title":"An _______ cannot provide any code at all,can provide only  the signature.","variants":["abstract class","interface","","",""],"correct":"2","active":true},{"title":"Can objects of abstract classes be instantiated","variants":["True","False","","",""],"correct":"2","active":true},{"title":"Pick the term that relates to polymorphism","variants":["Static allocation","Dynamic binding","Dynamic allocation","Static typing",""],"correct":"2","active":true},{"title":"Main method can be overriden","variants":["True","False","","",""],"correct":"2","active":true},{"title":"Constructors are used to","variants":["Initialize a newly created object.","Free memory.","To create a sub class","To build a user interface.",""],"correct":"1","active":true},{"title":"When sub class declares a method that has the same type arguments as a method declared by one of its superclass,it is termed as","variants":["method overloading","method overriding","operator overloading","operator overriding",""],"correct":"2","active":true},{"title":"Keyword which is used to access the method or member variables from the superclass","variants":["is_a","super","has_a","using",""],"correct":"2","active":true},{"title":"Information Hiding can also be termed as","variants":["data hiding","encapsulation","inheritance","",""],"correct":"2","active":true},{"title":"Method with the same name or different return type and difference in the parameters either in number or type is known as","variants":["Compile Time Overloading","function overloading","","",""],"correct":"1","active":true},{"title":"Static methods cannot be accessed directly from the class level.","variants":["True","False","","",""],"correct":"2","active":true}]}